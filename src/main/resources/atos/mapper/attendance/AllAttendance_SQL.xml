<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.atos.lms.business.attendance.service.AllAttendanceDAO">

    <!-- 조건에 따른 동적 WHERE 절 구성 -->
    <sql id="whereClause">
        <trim prefix="WHERE" prefixOverrides="AND">

            <!-- 강의 코드(Lecture)에 해당하는 조건으로 필터링 -->
            <if test="lectureCode > 0">
                AND s.LECTURE_ID = #{lectureCode}
            </if>
            <!-- 출석일 범위 조건 추가 -->
            <if test="srcStartDate != null and srcStartDate != ''">
                <![CDATA[
                AND a.ATTEND_DATE >= #{srcStartDate}
                ]]>
            </if>
            <if test="srcEndDate != null and srcEndDate != ''">
                <![CDATA[
                AND a.ATTEND_DATE <= #{srcEndDate}
                ]]>
            </if>
            <!-- 검색 조건 추가 -->
            <if test="searchCnd == null or searchCnd == ''">
                AND (
                m.NAME LIKE CONCAT('%', #{searchWrd}, '%') OR
                c.CORP_NAME LIKE CONCAT('%', #{searchWrd}, '%') OR
                e.TITLE LIKE CONCAT('%', #{searchWrd}, '%') OR
                l.LECTURE_TITLE LIKE CONCAT('%', #{searchWrd}, '%') OR
                s.MEMBER_ID LIKE CONCAT('%', #{searchWrd}, '%')
                )
            </if>
            <if test="searchCnd != null and searchCnd != ''">
                <choose>
                    <when test="searchCnd == 0">
                        AND (
                        m.NAME LIKE CONCAT('%', #{searchWrd}, '%') OR
                        s.MEMBER_ID LIKE CONCAT('%', #{searchWrd}, '%')
                        )
                    </when>
                    <when test="searchCnd == 1">
                        AND c.CORP_NAME LIKE CONCAT('%', #{searchWrd}, '%')
                    </when>
                </choose>
            </if>
        </trim>
    </sql>


    <!-- 출석 목록 조회 쿼리 -->
    <select id="selectAttendanceList" parameterType="com.atos.lms.business.attendance.model.AllAttendanceVO"
            resultType="com.atos.lms.business.attendance.model.AllAttendanceVO">
        SELECT
        a.ATTEND_CODE,        <!-- 출석 코드 -->
        a.ENROLL_ID,          <!-- 수강생 배정 코드 -->
        a.ATTEND_DATE,        <!-- 출석 날짜 -->
        a.IN_TIME,            <!-- 입실 시간 -->
        a.OUT_TIME,           <!-- 퇴실 시간 -->
            CASE
        WHEN a.STATUS IS NULL THEN '출석대기'   <!-- 상태 값이 NULL일 때 '출석대기'로 표시 -->
        ELSE a.STATUS
        END AS statusName,    <!-- 상태 값이 있으면 기존 값을 사용 -->
        s.MEMBER_ID,          <!-- 수강생 ID -->
        m.NAME,               <!-- 수강생 이름 -->
        c.CORP_NAME,          <!-- 소속 회사명 -->
        e.TITLE AS title,     <!-- 교육명 -->
        l.LECTURE_TITLE,      <!-- 강의 제목 -->
        CASE
        WHEN L.LEARN_DATE >= CURDATE() THEN '진행중'
        ELSE '종료'
        END AS learnStatus   <!-- 강의 상태 -->
        FROM
        ATOS_ATTENDANCE a
        INNER JOIN
        ATOS_ENROLLMENT s ON a.ENROLL_ID = s.ENROLL_CODE
        INNER JOIN
        ATOS_MEMBER m ON s.MEMBER_ID = m.ID
        LEFT JOIN
        ATOS_MEMBER_NOMAL mn ON m.ID = mn.MEMBER_ID   <!-- 회원 정보와 회사 정보 연결 -->
        LEFT JOIN
        ATOS_COMPANY c ON mn.BIZ_REG_NO = c.BIZ_REG_NO <!-- 회사 정보 연결 -->
        INNER JOIN
        ATOS_LECTURE l ON s.LECTURE_ID = l.LECTURE_CODE
        INNER JOIN
        ATOS_EDUCATION e ON l.EDUCATION = e.EDU_CODE  <!-- 교육 정보 (과정명) -->
        <include refid="whereClause"/>  <!-- 동적 WHERE 조건 추가 -->
        ORDER BY
        a.ATTEND_CODE DESC
        LIMIT
        #{recordCountPerPage} OFFSET #{firstIndex}
    </select>


    <!-- 출석 목록 총 개수 조회 쿼리 -->
    <select id="selectAttendanceListCnt" parameterType="com.atos.lms.business.attendance.model.AllAttendanceVO"
            resultType="int">
        SELECT COUNT(a.ATTEND_CODE)
        FROM ATOS_ATTENDANCE a
        JOIN ATOS_ENROLLMENT s ON a.ENROLL_ID = s.ENROLL_CODE
        JOIN ATOS_MEMBER m ON s.MEMBER_ID = m.ID
        LEFT JOIN ATOS_MEMBER_NOMAL mn ON m.ID = mn.MEMBER_ID       <!-- 회원 정보와 회사 정보 연결 -->
        LEFT JOIN ATOS_COMPANY c ON mn.BIZ_REG_NO = c.BIZ_REG_NO    <!-- 회사 정보 연결 -->
        JOIN ATOS_LECTURE l ON s.LECTURE_ID = l.LECTURE_CODE
        JOIN ATOS_EDUCATION e ON l.EDUCATION = e.EDU_CODE
        <include refid="whereClause"/>                         <!-- 동적 WHERE 조건 포함 -->
    </select>


    <!-- 교육 목록 조회 -->
    <select id="selectEducationList" resultType="com.atos.lms.business.attendance.model.AllAttendanceVO">
        SELECT
        L.LECTURE_CODE,
        E.TITLE AS title,  <!-- 교육명 -->
        L.LECTURE_TITLE             <!-- 강의 제목 -->
        FROM
        ATOS_LECTURE L
        JOIN
        ATOS_EDUCATION E
        ON
        L.EDUCATION = E.EDU_CODE
        WHERE
        L.STATUS != '4002'
    </select>


    <!-- 입실 시간 업데이트 -->
    <update id="updateCheckIn" parameterType="map">
        UPDATE ATOS_ATTENDANCE
        SET IN_TIME = #{inTime},
        ATTEND_DATE = #{attendDate}
        WHERE ATTEND_CODE = #{attendCode}
    </update>

    <!-- 퇴실 시간 및 상태 업데이트 -->
    <update id="updateCheckOut" parameterType="map">
        UPDATE ATOS_ATTENDANCE
        SET OUT_TIME = #{outTime},
        STATUS = CASE WHEN IN_TIME IS NOT NULL THEN '출석' ELSE STATUS END
        WHERE ATTEND_CODE = #{attendCode}
    </update>

    <!-- 출석 코드로 특정 출석 정보 조회 -->
    <select id="selectAttendanceByCode" parameterType="int"
            resultType="com.atos.lms.business.attendance.model.AllAttendanceVO">
        SELECT ATTEND_CODE, IN_TIME, OUT_TIME, ATTEND_DATE
        FROM ATOS_ATTENDANCE
        WHERE ATTEND_CODE = #{attendCode}
    </select>

    <!-- 입실 시간 업데이트 (전체) -->
    <update id="updateCheckInAll" parameterType="map">
        UPDATE ATOS_ATTENDANCE
        SET IN_TIME = #{inTime},
        ATTEND_DATE = #{attendDate}
        WHERE ATTEND_CODE IN
        <foreach item="item" collection="attendCodes" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>

    <!-- 퇴실 시간 업데이트 (전체) -->
    <update id="updateCheckOutAll" parameterType="map">
        UPDATE ATOS_ATTENDANCE
        SET OUT_TIME = #{outTime},
        STATUS = CASE WHEN IN_TIME IS NOT NULL THEN '출석' ELSE STATUS END
        WHERE ATTEND_CODE IN
        <foreach item="item" collection="attendCodes" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>

    <!-- 결석 처리 업데이트 -->
    <update id="updateAllAbsence" parameterType="list">
        UPDATE ATOS_ATTENDANCE
        SET STATUS = '결석',
        IN_TIME = NULL,
        OUT_TIME = NULL,
        ATTEND_DATE = NULL
        WHERE ATTEND_CODE IN
        <foreach item="item" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>


<!-- 엑셀 다운로드 -->
<select id="selectAttendanceExcelList" resultType="com.atos.lms.business.attendance.model.AllAttendanceExcelVO">
    SELECT
        ROW_NUMBER() OVER (ORDER BY a.ATTEND_CODE DESC) AS No,  <!-- 순서 번호 추가 -->
        c.CORP_NAME AS corpName,
        e.TITLE AS title,
        l.LECTURE_TITLE AS lectureTitle,
        s.MEMBER_ID AS memberId,
        m.NAME AS name,
        a.STATUS AS status,
        a.ATTEND_DATE AS attendDate,
        a.IN_TIME AS inTime,
        a.OUT_TIME AS outTime,
        CASE
            WHEN l.LEARN_DATE >= CURDATE() THEN '진행중'
            ELSE '종료'
        END AS learnStatus
    FROM
        ATOS_ATTENDANCE a
    INNER JOIN
        ATOS_ENROLLMENT s ON a.ENROLL_ID = s.ENROLL_CODE
    INNER JOIN
        ATOS_MEMBER m ON s.MEMBER_ID = m.ID
    LEFT JOIN
        ATOS_MEMBER_NOMAL mn ON m.ID = mn.MEMBER_ID
    LEFT JOIN
        ATOS_COMPANY c ON mn.BIZ_REG_NO = c.BIZ_REG_NO
    INNER JOIN
        ATOS_LECTURE l ON s.LECTURE_ID = l.LECTURE_CODE
    INNER JOIN
        ATOS_EDUCATION e ON l.EDUCATION = e.EDU_CODE
    <include refid="whereClause"/>
    ORDER BY
        a.ATTEND_CODE DESC
</select>




</mapper>


